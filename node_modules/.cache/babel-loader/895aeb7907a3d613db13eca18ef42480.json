{"ast":null,"code":"import { window } from 'ssr-window';\nimport Utils from '../../../utils/utils';\nexport default function () {\n  const swiper = this;\n  const params = swiper.params;\n  const {\n    $wrapperEl,\n    size: swiperSize,\n    rtlTranslate: rtl,\n    wrongRTL\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\n  const slides = $wrapperEl.children(`.${swiper.params.slideClass}`);\n  const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\n  let snapGrid = [];\n  const slidesGrid = [];\n  const slidesSizesGrid = [];\n\n  function slidesForMargin(slideIndex) {\n    if (!params.cssMode) return true;\n\n    if (slideIndex === slides.length - 1) {\n      return false;\n    }\n\n    return true;\n  }\n\n  let offsetBefore = params.slidesOffsetBefore;\n\n  if (typeof offsetBefore === 'function') {\n    offsetBefore = params.slidesOffsetBefore.call(swiper);\n  }\n\n  let offsetAfter = params.slidesOffsetAfter;\n\n  if (typeof offsetAfter === 'function') {\n    offsetAfter = params.slidesOffsetAfter.call(swiper);\n  }\n\n  const previousSnapGridLength = swiper.snapGrid.length;\n  const previousSlidesGridLength = swiper.snapGrid.length;\n  let spaceBetween = params.spaceBetween;\n  let slidePosition = -offsetBefore;\n  let prevSlideSize = 0;\n  let index = 0;\n\n  if (typeof swiperSize === 'undefined') {\n    return;\n  }\n\n  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n    spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;\n  }\n\n  swiper.virtualSize = -spaceBetween; // reset margins\n\n  if (rtl) slides.css({\n    marginLeft: '',\n    marginTop: ''\n  });else slides.css({\n    marginRight: '',\n    marginBottom: ''\n  });\n  let slidesNumberEvenToRows;\n\n  if (params.slidesPerColumn > 1) {\n    if (Math.floor(slidesLength / params.slidesPerColumn) === slidesLength / swiper.params.slidesPerColumn) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / params.slidesPerColumn) * params.slidesPerColumn;\n    }\n\n    if (params.slidesPerView !== 'auto' && params.slidesPerColumnFill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, params.slidesPerView * params.slidesPerColumn);\n    }\n  } // Calc slides\n\n\n  let slideSize;\n  const slidesPerColumn = params.slidesPerColumn;\n  const slidesPerRow = slidesNumberEvenToRows / slidesPerColumn;\n  const numFullColumns = Math.floor(slidesLength / params.slidesPerColumn);\n\n  for (let i = 0; i < slidesLength; i += 1) {\n    slideSize = 0;\n    const slide = slides.eq(i);\n\n    if (params.slidesPerColumn > 1) {\n      // Set slides order\n      let newSlideOrderIndex;\n      let column;\n      let row;\n\n      if (params.slidesPerColumnFill === 'row' && params.slidesPerGroup > 1) {\n        const groupIndex = Math.floor(i / (params.slidesPerGroup * params.slidesPerColumn));\n        const slideIndexInGroup = i - params.slidesPerColumn * params.slidesPerGroup * groupIndex;\n        const columnsInGroup = groupIndex === 0 ? params.slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * slidesPerColumn * params.slidesPerGroup) / slidesPerColumn), params.slidesPerGroup);\n        row = Math.floor(slideIndexInGroup / columnsInGroup);\n        column = slideIndexInGroup - row * columnsInGroup + groupIndex * params.slidesPerGroup;\n        newSlideOrderIndex = column + row * slidesNumberEvenToRows / slidesPerColumn;\n        slide.css({\n          '-webkit-box-ordinal-group': newSlideOrderIndex,\n          '-moz-box-ordinal-group': newSlideOrderIndex,\n          '-ms-flex-order': newSlideOrderIndex,\n          '-webkit-order': newSlideOrderIndex,\n          order: newSlideOrderIndex\n        });\n      } else if (params.slidesPerColumnFill === 'column') {\n        column = Math.floor(i / slidesPerColumn);\n        row = i - column * slidesPerColumn;\n\n        if (column > numFullColumns || column === numFullColumns && row === slidesPerColumn - 1) {\n          row += 1;\n\n          if (row >= slidesPerColumn) {\n            row = 0;\n            column += 1;\n          }\n        }\n      } else {\n        row = Math.floor(i / slidesPerRow);\n        column = i - row * slidesPerRow;\n      }\n\n      slide.css(`margin-${swiper.isHorizontal() ? 'top' : 'left'}`, row !== 0 && params.spaceBetween && `${params.spaceBetween}px`);\n    }\n\n    if (slide.css('display') === 'none') continue; // eslint-disable-line\n\n    if (params.slidesPerView === 'auto') {\n      const slideStyles = window.getComputedStyle(slide[0], null);\n      const currentTransform = slide[0].style.transform;\n      const currentWebKitTransform = slide[0].style.webkitTransform;\n\n      if (currentTransform) {\n        slide[0].style.transform = 'none';\n      }\n\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = 'none';\n      }\n\n      if (params.roundLengths) {\n        slideSize = swiper.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true);\n      } else {\n        // eslint-disable-next-line\n        if (swiper.isHorizontal()) {\n          const width = parseFloat(slideStyles.getPropertyValue('width'));\n          const paddingLeft = parseFloat(slideStyles.getPropertyValue('padding-left'));\n          const paddingRight = parseFloat(slideStyles.getPropertyValue('padding-right'));\n          const marginLeft = parseFloat(slideStyles.getPropertyValue('margin-left'));\n          const marginRight = parseFloat(slideStyles.getPropertyValue('margin-right'));\n          const boxSizing = slideStyles.getPropertyValue('box-sizing');\n\n          if (boxSizing && boxSizing === 'border-box') {\n            slideSize = width + marginLeft + marginRight;\n          } else {\n            slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight;\n          }\n        } else {\n          const height = parseFloat(slideStyles.getPropertyValue('height'));\n          const paddingTop = parseFloat(slideStyles.getPropertyValue('padding-top'));\n          const paddingBottom = parseFloat(slideStyles.getPropertyValue('padding-bottom'));\n          const marginTop = parseFloat(slideStyles.getPropertyValue('margin-top'));\n          const marginBottom = parseFloat(slideStyles.getPropertyValue('margin-bottom'));\n          const boxSizing = slideStyles.getPropertyValue('box-sizing');\n\n          if (boxSizing && boxSizing === 'border-box') {\n            slideSize = height + marginTop + marginBottom;\n          } else {\n            slideSize = height + paddingTop + paddingBottom + marginTop + marginBottom;\n          }\n        }\n      }\n\n      if (currentTransform) {\n        slide[0].style.transform = currentTransform;\n      }\n\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = currentWebKitTransform;\n      }\n\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n    } else {\n      slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n\n      if (slides[i]) {\n        if (swiper.isHorizontal()) {\n          slides[i].style.width = `${slideSize}px`;\n        } else {\n          slides[i].style.height = `${slideSize}px`;\n        }\n      }\n    }\n\n    if (slides[i]) {\n      slides[i].swiperSlideSize = slideSize;\n    }\n\n    slidesSizesGrid.push(slideSize);\n\n    if (params.centeredSlides) {\n      slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;\n      if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n    } else {\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n      slidePosition = slidePosition + slideSize + spaceBetween;\n    }\n\n    swiper.virtualSize += slideSize + spaceBetween;\n    prevSlideSize = slideSize;\n    index += 1;\n  }\n\n  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\n  let newSlidesGrid;\n\n  if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {\n    $wrapperEl.css({\n      width: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n\n  if (params.setWrapperSize) {\n    if (swiper.isHorizontal()) $wrapperEl.css({\n      width: `${swiper.virtualSize + params.spaceBetween}px`\n    });else $wrapperEl.css({\n      height: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n\n  if (params.slidesPerColumn > 1) {\n    swiper.virtualSize = (slideSize + params.spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / params.slidesPerColumn) - params.spaceBetween;\n    if (swiper.isHorizontal()) $wrapperEl.css({\n      width: `${swiper.virtualSize + params.spaceBetween}px`\n    });else $wrapperEl.css({\n      height: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n\n    if (params.centeredSlides) {\n      newSlidesGrid = [];\n\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n\n      snapGrid = newSlidesGrid;\n    }\n  } // Remove last grid elements depending on width\n\n\n  if (!params.centeredSlides) {\n    newSlidesGrid = [];\n\n    for (let i = 0; i < snapGrid.length; i += 1) {\n      let slidesGridItem = snapGrid[i];\n      if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n\n      if (snapGrid[i] <= swiper.virtualSize - swiperSize) {\n        newSlidesGrid.push(slidesGridItem);\n      }\n    }\n\n    snapGrid = newSlidesGrid;\n\n    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\n      snapGrid.push(swiper.virtualSize - swiperSize);\n    }\n  }\n\n  if (snapGrid.length === 0) snapGrid = [0];\n\n  if (params.spaceBetween !== 0) {\n    if (swiper.isHorizontal()) {\n      if (rtl) slides.filter(slidesForMargin).css({\n        marginLeft: `${spaceBetween}px`\n      });else slides.filter(slidesForMargin).css({\n        marginRight: `${spaceBetween}px`\n      });\n    } else slides.filter(slidesForMargin).css({\n      marginBottom: `${spaceBetween}px`\n    });\n  }\n\n  if (params.centeredSlides && params.centeredSlidesBounds) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach(slideSizeValue => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n    const maxSnap = allSlidesSize - swiperSize;\n    snapGrid = snapGrid.map(snap => {\n      if (snap < 0) return -offsetBefore;\n      if (snap > maxSnap) return maxSnap + offsetAfter;\n      return snap;\n    });\n  }\n\n  if (params.centerInsufficientSlides) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach(slideSizeValue => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n\n    if (allSlidesSize < swiperSize) {\n      const allSlidesOffset = (swiperSize - allSlidesSize) / 2;\n      snapGrid.forEach((snap, snapIndex) => {\n        snapGrid[snapIndex] = snap - allSlidesOffset;\n      });\n      slidesGrid.forEach((snap, snapIndex) => {\n        slidesGrid[snapIndex] = snap + allSlidesOffset;\n      });\n    }\n  }\n\n  Utils.extend(swiper, {\n    slides,\n    snapGrid,\n    slidesGrid,\n    slidesSizesGrid\n  });\n\n  if (slidesLength !== previousSlidesLength) {\n    swiper.emit('slidesLengthChange');\n  }\n\n  if (snapGrid.length !== previousSnapGridLength) {\n    if (swiper.params.watchOverflow) swiper.checkOverflow();\n    swiper.emit('snapGridLengthChange');\n  }\n\n  if (slidesGrid.length !== previousSlidesGridLength) {\n    swiper.emit('slidesGridLengthChange');\n  }\n\n  if (params.watchSlidesProgress || params.watchSlidesVisibility) {\n    swiper.updateSlidesOffset();\n  }\n}","map":{"version":3,"sources":["/Users/mac2/Desktop/git/thedigitalmoney/digital-money/node_modules/swiper/src/components/core/update/updateSlides.js"],"names":["window","Utils","swiper","params","$wrapperEl","size","swiperSize","rtlTranslate","rtl","wrongRTL","isVirtual","virtual","enabled","previousSlidesLength","slides","length","children","slideClass","slidesLength","snapGrid","slidesGrid","slidesSizesGrid","slidesForMargin","slideIndex","cssMode","offsetBefore","slidesOffsetBefore","call","offsetAfter","slidesOffsetAfter","previousSnapGridLength","previousSlidesGridLength","spaceBetween","slidePosition","prevSlideSize","index","indexOf","parseFloat","replace","virtualSize","css","marginLeft","marginTop","marginRight","marginBottom","slidesNumberEvenToRows","slidesPerColumn","Math","floor","ceil","slidesPerView","slidesPerColumnFill","max","slideSize","slidesPerRow","numFullColumns","i","slide","eq","newSlideOrderIndex","column","row","slidesPerGroup","groupIndex","slideIndexInGroup","columnsInGroup","min","order","isHorizontal","slideStyles","getComputedStyle","currentTransform","style","transform","currentWebKitTransform","webkitTransform","roundLengths","outerWidth","outerHeight","width","getPropertyValue","paddingLeft","paddingRight","boxSizing","height","paddingTop","paddingBottom","swiperSlideSize","push","centeredSlides","abs","slidesPerGroupSkip","newSlidesGrid","effect","setWrapperSize","slidesGridItem","filter","centeredSlidesBounds","allSlidesSize","forEach","slideSizeValue","maxSnap","map","snap","centerInsufficientSlides","allSlidesOffset","snapIndex","extend","emit","watchOverflow","checkOverflow","watchSlidesProgress","watchSlidesVisibility","updateSlidesOffset"],"mappings":"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","sourcesContent":["import { window } from 'ssr-window';\nimport Utils from '../../../utils/utils';\n\nexport default function () {\n  const swiper = this;\n  const params = swiper.params;\n\n  const {\n    $wrapperEl, size: swiperSize, rtlTranslate: rtl, wrongRTL,\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\n  const slides = $wrapperEl.children(`.${swiper.params.slideClass}`);\n  const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\n  let snapGrid = [];\n  const slidesGrid = [];\n  const slidesSizesGrid = [];\n\n  function slidesForMargin(slideIndex) {\n    if (!params.cssMode) return true;\n    if (slideIndex === slides.length - 1) {\n      return false;\n    }\n    return true;\n  }\n\n  let offsetBefore = params.slidesOffsetBefore;\n  if (typeof offsetBefore === 'function') {\n    offsetBefore = params.slidesOffsetBefore.call(swiper);\n  }\n\n  let offsetAfter = params.slidesOffsetAfter;\n  if (typeof offsetAfter === 'function') {\n    offsetAfter = params.slidesOffsetAfter.call(swiper);\n  }\n\n  const previousSnapGridLength = swiper.snapGrid.length;\n  const previousSlidesGridLength = swiper.snapGrid.length;\n\n  let spaceBetween = params.spaceBetween;\n  let slidePosition = -offsetBefore;\n  let prevSlideSize = 0;\n  let index = 0;\n  if (typeof swiperSize === 'undefined') {\n    return;\n  }\n  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n    spaceBetween = (parseFloat(spaceBetween.replace('%', '')) / 100) * swiperSize;\n  }\n\n  swiper.virtualSize = -spaceBetween;\n\n  // reset margins\n  if (rtl) slides.css({ marginLeft: '', marginTop: '' });\n  else slides.css({ marginRight: '', marginBottom: '' });\n\n  let slidesNumberEvenToRows;\n  if (params.slidesPerColumn > 1) {\n    if (Math.floor(slidesLength / params.slidesPerColumn) === slidesLength / swiper.params.slidesPerColumn) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / params.slidesPerColumn) * params.slidesPerColumn;\n    }\n    if (params.slidesPerView !== 'auto' && params.slidesPerColumnFill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, params.slidesPerView * params.slidesPerColumn);\n    }\n  }\n\n  // Calc slides\n  let slideSize;\n  const slidesPerColumn = params.slidesPerColumn;\n  const slidesPerRow = slidesNumberEvenToRows / slidesPerColumn;\n  const numFullColumns = Math.floor(slidesLength / params.slidesPerColumn);\n  for (let i = 0; i < slidesLength; i += 1) {\n    slideSize = 0;\n    const slide = slides.eq(i);\n    if (params.slidesPerColumn > 1) {\n      // Set slides order\n      let newSlideOrderIndex;\n      let column;\n      let row;\n      if (params.slidesPerColumnFill === 'row' && params.slidesPerGroup > 1) {\n        const groupIndex = Math.floor(i / (params.slidesPerGroup * params.slidesPerColumn));\n        const slideIndexInGroup = i - params.slidesPerColumn * params.slidesPerGroup * groupIndex;\n        const columnsInGroup = groupIndex === 0\n          ? params.slidesPerGroup\n          : Math.min(Math.ceil((slidesLength - groupIndex * slidesPerColumn * params.slidesPerGroup) / slidesPerColumn), params.slidesPerGroup);\n        row = Math.floor(slideIndexInGroup / columnsInGroup);\n        column = (slideIndexInGroup - row * columnsInGroup) + groupIndex * params.slidesPerGroup;\n\n        newSlideOrderIndex = column + ((row * slidesNumberEvenToRows) / slidesPerColumn);\n        slide\n          .css({\n            '-webkit-box-ordinal-group': newSlideOrderIndex,\n            '-moz-box-ordinal-group': newSlideOrderIndex,\n            '-ms-flex-order': newSlideOrderIndex,\n            '-webkit-order': newSlideOrderIndex,\n            order: newSlideOrderIndex,\n          });\n      } else if (params.slidesPerColumnFill === 'column') {\n        column = Math.floor(i / slidesPerColumn);\n        row = i - (column * slidesPerColumn);\n        if (column > numFullColumns || (column === numFullColumns && row === slidesPerColumn - 1)) {\n          row += 1;\n          if (row >= slidesPerColumn) {\n            row = 0;\n            column += 1;\n          }\n        }\n      } else {\n        row = Math.floor(i / slidesPerRow);\n        column = i - (row * slidesPerRow);\n      }\n      slide.css(\n        `margin-${swiper.isHorizontal() ? 'top' : 'left'}`,\n        (row !== 0 && params.spaceBetween) && (`${params.spaceBetween}px`)\n      );\n    }\n    if (slide.css('display') === 'none') continue; // eslint-disable-line\n\n    if (params.slidesPerView === 'auto') {\n      const slideStyles = window.getComputedStyle(slide[0], null);\n      const currentTransform = slide[0].style.transform;\n      const currentWebKitTransform = slide[0].style.webkitTransform;\n      if (currentTransform) {\n        slide[0].style.transform = 'none';\n      }\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = 'none';\n      }\n      if (params.roundLengths) {\n        slideSize = swiper.isHorizontal()\n          ? slide.outerWidth(true)\n          : slide.outerHeight(true);\n      } else {\n        // eslint-disable-next-line\n        if (swiper.isHorizontal()) {\n          const width = parseFloat(slideStyles.getPropertyValue('width'));\n          const paddingLeft = parseFloat(slideStyles.getPropertyValue('padding-left'));\n          const paddingRight = parseFloat(slideStyles.getPropertyValue('padding-right'));\n          const marginLeft = parseFloat(slideStyles.getPropertyValue('margin-left'));\n          const marginRight = parseFloat(slideStyles.getPropertyValue('margin-right'));\n          const boxSizing = slideStyles.getPropertyValue('box-sizing');\n          if (boxSizing && boxSizing === 'border-box') {\n            slideSize = width + marginLeft + marginRight;\n          } else {\n            slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight;\n          }\n        } else {\n          const height = parseFloat(slideStyles.getPropertyValue('height'));\n          const paddingTop = parseFloat(slideStyles.getPropertyValue('padding-top'));\n          const paddingBottom = parseFloat(slideStyles.getPropertyValue('padding-bottom'));\n          const marginTop = parseFloat(slideStyles.getPropertyValue('margin-top'));\n          const marginBottom = parseFloat(slideStyles.getPropertyValue('margin-bottom'));\n          const boxSizing = slideStyles.getPropertyValue('box-sizing');\n          if (boxSizing && boxSizing === 'border-box') {\n            slideSize = height + marginTop + marginBottom;\n          } else {\n            slideSize = height + paddingTop + paddingBottom + marginTop + marginBottom;\n          }\n        }\n      }\n      if (currentTransform) {\n        slide[0].style.transform = currentTransform;\n      }\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = currentWebKitTransform;\n      }\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n    } else {\n      slideSize = (swiperSize - ((params.slidesPerView - 1) * spaceBetween)) / params.slidesPerView;\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n\n      if (slides[i]) {\n        if (swiper.isHorizontal()) {\n          slides[i].style.width = `${slideSize}px`;\n        } else {\n          slides[i].style.height = `${slideSize}px`;\n        }\n      }\n    }\n    if (slides[i]) {\n      slides[i].swiperSlideSize = slideSize;\n    }\n    slidesSizesGrid.push(slideSize);\n\n\n    if (params.centeredSlides) {\n      slidePosition = slidePosition + (slideSize / 2) + (prevSlideSize / 2) + spaceBetween;\n      if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - (swiperSize / 2) - spaceBetween;\n      if (i === 0) slidePosition = slidePosition - (swiperSize / 2) - spaceBetween;\n      if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if ((index) % params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n    } else {\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n      slidePosition = slidePosition + slideSize + spaceBetween;\n    }\n\n    swiper.virtualSize += slideSize + spaceBetween;\n\n    prevSlideSize = slideSize;\n\n    index += 1;\n  }\n  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\n  let newSlidesGrid;\n\n  if (\n    rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {\n    $wrapperEl.css({ width: `${swiper.virtualSize + params.spaceBetween}px` });\n  }\n  if (params.setWrapperSize) {\n    if (swiper.isHorizontal()) $wrapperEl.css({ width: `${swiper.virtualSize + params.spaceBetween}px` });\n    else $wrapperEl.css({ height: `${swiper.virtualSize + params.spaceBetween}px` });\n  }\n\n  if (params.slidesPerColumn > 1) {\n    swiper.virtualSize = (slideSize + params.spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / params.slidesPerColumn) - params.spaceBetween;\n    if (swiper.isHorizontal()) $wrapperEl.css({ width: `${swiper.virtualSize + params.spaceBetween}px` });\n    else $wrapperEl.css({ height: `${swiper.virtualSize + params.spaceBetween}px` });\n    if (params.centeredSlides) {\n      newSlidesGrid = [];\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n      snapGrid = newSlidesGrid;\n    }\n  }\n\n  // Remove last grid elements depending on width\n  if (!params.centeredSlides) {\n    newSlidesGrid = [];\n    for (let i = 0; i < snapGrid.length; i += 1) {\n      let slidesGridItem = snapGrid[i];\n      if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n      if (snapGrid[i] <= swiper.virtualSize - swiperSize) {\n        newSlidesGrid.push(slidesGridItem);\n      }\n    }\n    snapGrid = newSlidesGrid;\n    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\n      snapGrid.push(swiper.virtualSize - swiperSize);\n    }\n  }\n  if (snapGrid.length === 0) snapGrid = [0];\n\n  if (params.spaceBetween !== 0) {\n    if (swiper.isHorizontal()) {\n      if (rtl) slides.filter(slidesForMargin).css({ marginLeft: `${spaceBetween}px` });\n      else slides.filter(slidesForMargin).css({ marginRight: `${spaceBetween}px` });\n    } else slides.filter(slidesForMargin).css({ marginBottom: `${spaceBetween}px` });\n  }\n\n  if (params.centeredSlides && params.centeredSlidesBounds) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach((slideSizeValue) => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n    const maxSnap = allSlidesSize - swiperSize;\n    snapGrid = snapGrid.map((snap) => {\n      if (snap < 0) return -offsetBefore;\n      if (snap > maxSnap) return maxSnap + offsetAfter;\n      return snap;\n    });\n  }\n\n  if (params.centerInsufficientSlides) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach((slideSizeValue) => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n    if (allSlidesSize < swiperSize) {\n      const allSlidesOffset = (swiperSize - allSlidesSize) / 2;\n      snapGrid.forEach((snap, snapIndex) => {\n        snapGrid[snapIndex] = snap - allSlidesOffset;\n      });\n      slidesGrid.forEach((snap, snapIndex) => {\n        slidesGrid[snapIndex] = snap + allSlidesOffset;\n      });\n    }\n  }\n\n  Utils.extend(swiper, {\n    slides,\n    snapGrid,\n    slidesGrid,\n    slidesSizesGrid,\n  });\n\n  if (slidesLength !== previousSlidesLength) {\n    swiper.emit('slidesLengthChange');\n  }\n  if (snapGrid.length !== previousSnapGridLength) {\n    if (swiper.params.watchOverflow) swiper.checkOverflow();\n    swiper.emit('snapGridLengthChange');\n  }\n  if (slidesGrid.length !== previousSlidesGridLength) {\n    swiper.emit('slidesGridLengthChange');\n  }\n\n  if (params.watchSlidesProgress || params.watchSlidesVisibility) {\n    swiper.updateSlidesOffset();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}