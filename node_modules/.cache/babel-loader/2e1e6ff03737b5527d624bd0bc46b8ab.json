{"ast":null,"code":"import Utils from '../../../utils/utils';\nexport default function () {\n  const swiper = this;\n  const {\n    activeIndex,\n    initialized,\n    loopedSlides = 0,\n    params,\n    $el\n  } = swiper;\n  const breakpoints = params.breakpoints;\n  if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return; // Get breakpoint for window width and update parameters\n\n  const breakpoint = swiper.getBreakpoint(breakpoints);\n\n  if (breakpoint && swiper.currentBreakpoint !== breakpoint) {\n    const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;\n\n    if (breakpointOnlyParams) {\n      ['slidesPerView', 'spaceBetween', 'slidesPerGroup', 'slidesPerGroupSkip', 'slidesPerColumn'].forEach(param => {\n        const paramValue = breakpointOnlyParams[param];\n        if (typeof paramValue === 'undefined') return;\n\n        if (param === 'slidesPerView' && (paramValue === 'AUTO' || paramValue === 'auto')) {\n          breakpointOnlyParams[param] = 'auto';\n        } else if (param === 'slidesPerView') {\n          breakpointOnlyParams[param] = parseFloat(paramValue);\n        } else {\n          breakpointOnlyParams[param] = parseInt(paramValue, 10);\n        }\n      });\n    }\n\n    const breakpointParams = breakpointOnlyParams || swiper.originalParams;\n    const wasMultiRow = params.slidesPerColumn > 1;\n    const isMultiRow = breakpointParams.slidesPerColumn > 1;\n\n    if (wasMultiRow && !isMultiRow) {\n      $el.removeClass(`${params.containerModifierClass}multirow ${params.containerModifierClass}multirow-column`);\n    } else if (!wasMultiRow && isMultiRow) {\n      $el.addClass(`${params.containerModifierClass}multirow`);\n\n      if (breakpointParams.slidesPerColumnFill === 'column') {\n        $el.addClass(`${params.containerModifierClass}multirow-column`);\n      }\n    }\n\n    const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;\n    const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);\n\n    if (directionChanged && initialized) {\n      swiper.changeDirection();\n    }\n\n    Utils.extend(swiper.params, breakpointParams);\n    Utils.extend(swiper, {\n      allowTouchMove: swiper.params.allowTouchMove,\n      allowSlideNext: swiper.params.allowSlideNext,\n      allowSlidePrev: swiper.params.allowSlidePrev\n    });\n    swiper.currentBreakpoint = breakpoint;\n\n    if (needsReLoop && initialized) {\n      swiper.loopDestroy();\n      swiper.loopCreate();\n      swiper.updateSlides();\n      swiper.slideTo(activeIndex - loopedSlides + swiper.loopedSlides, 0, false);\n    }\n\n    swiper.emit('breakpoint', breakpointParams);\n  }\n}","map":{"version":3,"sources":["/Users/mac2/Desktop/git/thedigitalmoney/digital-money/node_modules/swiper/src/components/core/breakpoints/setBreakpoint.js"],"names":["Utils","swiper","activeIndex","initialized","loopedSlides","params","$el","breakpoints","Object","keys","length","breakpoint","getBreakpoint","currentBreakpoint","breakpointOnlyParams","undefined","forEach","param","paramValue","parseFloat","parseInt","breakpointParams","originalParams","wasMultiRow","slidesPerColumn","isMultiRow","removeClass","containerModifierClass","addClass","slidesPerColumnFill","directionChanged","direction","needsReLoop","loop","slidesPerView","changeDirection","extend","allowTouchMove","allowSlideNext","allowSlidePrev","loopDestroy","loopCreate","updateSlides","slideTo","emit"],"mappings":"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","sourcesContent":["import Utils from '../../../utils/utils';\n\nexport default function () {\n  const swiper = this;\n  const {\n    activeIndex, initialized, loopedSlides = 0, params, $el,\n  } = swiper;\n  const breakpoints = params.breakpoints;\n  if (!breakpoints || (breakpoints && Object.keys(breakpoints).length === 0)) return;\n\n  // Get breakpoint for window width and update parameters\n  const breakpoint = swiper.getBreakpoint(breakpoints);\n\n  if (breakpoint && swiper.currentBreakpoint !== breakpoint) {\n    const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;\n    if (breakpointOnlyParams) {\n      ['slidesPerView', 'spaceBetween', 'slidesPerGroup', 'slidesPerGroupSkip', 'slidesPerColumn'].forEach((param) => {\n        const paramValue = breakpointOnlyParams[param];\n        if (typeof paramValue === 'undefined') return;\n        if (param === 'slidesPerView' && (paramValue === 'AUTO' || paramValue === 'auto')) {\n          breakpointOnlyParams[param] = 'auto';\n        } else if (param === 'slidesPerView') {\n          breakpointOnlyParams[param] = parseFloat(paramValue);\n        } else {\n          breakpointOnlyParams[param] = parseInt(paramValue, 10);\n        }\n      });\n    }\n\n    const breakpointParams = breakpointOnlyParams || swiper.originalParams;\n    const wasMultiRow = params.slidesPerColumn > 1;\n    const isMultiRow = breakpointParams.slidesPerColumn > 1;\n    if (wasMultiRow && !isMultiRow) {\n      $el.removeClass(`${params.containerModifierClass}multirow ${params.containerModifierClass}multirow-column`);\n    } else if (!wasMultiRow && isMultiRow) {\n      $el.addClass(`${params.containerModifierClass}multirow`);\n      if (breakpointParams.slidesPerColumnFill === 'column') {\n        $el.addClass(`${params.containerModifierClass}multirow-column`);\n      }\n    }\n\n    const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;\n    const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);\n\n    if (directionChanged && initialized) {\n      swiper.changeDirection();\n    }\n\n    Utils.extend(swiper.params, breakpointParams);\n\n    Utils.extend(swiper, {\n      allowTouchMove: swiper.params.allowTouchMove,\n      allowSlideNext: swiper.params.allowSlideNext,\n      allowSlidePrev: swiper.params.allowSlidePrev,\n    });\n\n    swiper.currentBreakpoint = breakpoint;\n\n    if (needsReLoop && initialized) {\n      swiper.loopDestroy();\n      swiper.loopCreate();\n      swiper.updateSlides();\n      swiper.slideTo((activeIndex - loopedSlides) + swiper.loopedSlides, 0, false);\n    }\n\n    swiper.emit('breakpoint', breakpointParams);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}