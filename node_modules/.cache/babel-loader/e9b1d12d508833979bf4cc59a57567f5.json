{"ast":null,"code":"export default function (runCallbacks = true, direction) {\n  const swiper = this;\n  const {\n    activeIndex,\n    params,\n    previousIndex\n  } = swiper;\n  if (params.cssMode) return;\n\n  if (params.autoHeight) {\n    swiper.updateAutoHeight();\n  }\n\n  let dir = direction;\n\n  if (!dir) {\n    if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';\n  }\n\n  swiper.emit('transitionStart');\n\n  if (runCallbacks && activeIndex !== previousIndex) {\n    if (dir === 'reset') {\n      swiper.emit('slideResetTransitionStart');\n      return;\n    }\n\n    swiper.emit('slideChangeTransitionStart');\n\n    if (dir === 'next') {\n      swiper.emit('slideNextTransitionStart');\n    } else {\n      swiper.emit('slidePrevTransitionStart');\n    }\n  }\n}","map":{"version":3,"sources":["/Users/mac2/Desktop/git/thedigitalmoney/digital-money/node_modules/swiper/src/components/core/transition/transitionStart.js"],"names":["runCallbacks","direction","swiper","activeIndex","params","previousIndex","cssMode","autoHeight","updateAutoHeight","dir","emit"],"mappings":"AAAA,eAAe,UAAUA,YAAY,GAAG,IAAzB,EAA+BC,SAA/B,EAA0C;AACvD,QAAMC,MAAM,GAAG,IAAf;AACA,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,MAAf;AAAuBC,IAAAA;AAAvB,MAAyCH,MAA/C;AACA,MAAIE,MAAM,CAACE,OAAX,EAAoB;;AACpB,MAAIF,MAAM,CAACG,UAAX,EAAuB;AACrBL,IAAAA,MAAM,CAACM,gBAAP;AACD;;AAED,MAAIC,GAAG,GAAGR,SAAV;;AACA,MAAI,CAACQ,GAAL,EAAU;AACR,QAAIN,WAAW,GAAGE,aAAlB,EAAiCI,GAAG,GAAG,MAAN,CAAjC,KACK,IAAIN,WAAW,GAAGE,aAAlB,EAAiCI,GAAG,GAAG,MAAN,CAAjC,KACAA,GAAG,GAAG,OAAN;AACN;;AAEDP,EAAAA,MAAM,CAACQ,IAAP,CAAY,iBAAZ;;AAEA,MAAIV,YAAY,IAAIG,WAAW,KAAKE,aAApC,EAAmD;AACjD,QAAII,GAAG,KAAK,OAAZ,EAAqB;AACnBP,MAAAA,MAAM,CAACQ,IAAP,CAAY,2BAAZ;AACA;AACD;;AACDR,IAAAA,MAAM,CAACQ,IAAP,CAAY,4BAAZ;;AACA,QAAID,GAAG,KAAK,MAAZ,EAAoB;AAClBP,MAAAA,MAAM,CAACQ,IAAP,CAAY,0BAAZ;AACD,KAFD,MAEO;AACLR,MAAAA,MAAM,CAACQ,IAAP,CAAY,0BAAZ;AACD;AACF;AACF","sourcesContent":["export default function (runCallbacks = true, direction) {\n  const swiper = this;\n  const { activeIndex, params, previousIndex } = swiper;\n  if (params.cssMode) return;\n  if (params.autoHeight) {\n    swiper.updateAutoHeight();\n  }\n\n  let dir = direction;\n  if (!dir) {\n    if (activeIndex > previousIndex) dir = 'next';\n    else if (activeIndex < previousIndex) dir = 'prev';\n    else dir = 'reset';\n  }\n\n  swiper.emit('transitionStart');\n\n  if (runCallbacks && activeIndex !== previousIndex) {\n    if (dir === 'reset') {\n      swiper.emit('slideResetTransitionStart');\n      return;\n    }\n    swiper.emit('slideChangeTransitionStart');\n    if (dir === 'next') {\n      swiper.emit('slideNextTransitionStart');\n    } else {\n      swiper.emit('slidePrevTransitionStart');\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}